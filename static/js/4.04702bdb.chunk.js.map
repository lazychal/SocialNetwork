{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/MessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength100","maxLengthCreator","NewMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","isAuth","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCYnKC,EARI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACtC,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCFnBC,EAJC,SAACT,GACb,OAAO,yBAAKG,UAAWC,IAAEM,SAAUV,EAAMU,U,0CCCtCC,EAAeC,YAAiB,KAmB1BC,EAAsBC,YAAU,CAACC,KAAM,WAAjBD,EAjBZ,SAACd,GACpB,OACI,0BAAMgB,SAAUhB,EAAMiB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAQC,YAAa,qBACbX,KAAM,iBACNY,UAAWC,IACXC,SAAU,CAACC,IAAUZ,MAGjC,6BACI,gDCgBDa,EA3BC,SAACxB,GAGb,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMuB,IAAKD,EAAE5B,GAAIA,GAAI4B,EAAE5B,QACpF8B,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASxB,QAASwB,EAAExB,QAASqB,IAAKG,EAAEhC,QAMnF,OAAKF,EAAMmC,OAGP,yBAAKhC,UAAWC,IAAEwB,SACd,yBAAKzB,UAAWC,IAAEgC,cACbT,GAEL,yBAAKxB,UAAWC,IAAE6B,UACd,6BAAMD,GACN,kBAACnB,EAAD,CAAqBG,SAbb,SAACqB,GACjBrC,EAAMsC,YAAYD,EAAOE,qBAGH,kBAAC,IAAD,CAAUhC,GAAI,Y,wCCfxCiC,EAA6B,SAACf,GAAW,MAAO,CAACU,OAAQV,EAAMgB,KAAKN,S,OCqBzDO,sBACXC,aAjBkB,SAAClB,GAAW,MAAO,CAACC,YAAaD,EAAMC,gBAEpC,SAACkB,GAEtB,MAAO,CACHN,YAAa,SAACC,GACVK,EAASC,YAAmBN,UDTR,SAACO,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAKhD,MAAMmC,OACT,kBAACW,EAAcE,KAAKhD,OADI,kBAAC,IAAD,CAAUO,GAAG,eAHT,GACX0C,IAAMH,WAStC,OAFqCH,YAAQH,EAARG,CAAoCI,KCW9DL,CAGblB","file":"static/js/4.04702bdb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1fne7\",\"dialogsItems\":\"Dialogs_dialogsItems__2tkhY\",\"active\":\"Dialogs_active___GGp_\",\"messages\":\"Dialogs_messages__2_PVr\",\"message\":\"Dialogs_message__3MOZt\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>;\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.message}>{props.message}</div>;\r\n}\r\n\r\nexport default Message;","import {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Textarea} from \"../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nconst  maxLength100 = maxLengthCreator(100);\r\n\r\nconst NewMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field  placeholder={'Enter your message'}\r\n                        name={'newMessageBody'}\r\n                        component={Textarea}\r\n                        validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send it</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n//Обёртка, контейнер\r\nexport const NewMessageReduxForm = reduxForm({form: 'message'})(NewMessageForm);\r\nconst MessageForm = (props) => {\r\n    const onSubmit = (formData) => {\r\n        console.log(formData)\r\n    };\r\n    return <div>\r\n        <NewMessageReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n};\r\nexport default MessageForm;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {NewMessageReduxForm} from \"./MessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    //Эта переменная создана для хранения здесь значения dialogsPage.\r\n    let state = props.dialogsPage;\r\n    // Теперь мы получаем данные из переменной state, где по факту сидит dialogsPage из глобального store.\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    };\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <NewMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;","import React, {Component} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => {return {isAuth: state.auth.isAuth}};\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>;\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};","import React from \"react\";\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {return {dialogsPage: state.dialogsPage}};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n//Эта ф-я передаёт коллбэки в пропсы.\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        },\r\n    }\r\n};\r\n\r\n//Первый вызов compose, это вызов самой ф-и, а второй, это вызов функции, которую вернул compose.\r\n\r\n//Что происходит: Берем Dialogs, закидываем в withAuthRedirect, ответ withAuthRedirect\r\n// закидываем в connect.\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs);"],"sourceRoot":""}